{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-7c0abe45d6659c084cea5869cbe3d8d76552e4e8",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/Voting.sol": "project/contracts/Voting.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "project/contracts/Voting.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.28;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract Voting is Ownable {\r\n    struct Voter {\r\n        bool isRegistered;\r\n        bool hasVoted;\r\n        uint votedProposalId;\r\n    }\r\n\r\n    struct Proposal {\r\n        string description;\r\n        uint voteCount;\r\n    }\r\n\r\n    enum WorkflowStatus {\r\n        RegisteringVoters,\r\n        ProposalsRegistrationStarted,\r\n        ProposalsRegistrationEnded,\r\n        VotingSessionStarted,\r\n        VotingSessionEnded,\r\n        VotesTallied\r\n    }\r\n\r\n    constructor(address _addr) payable Ownable(msg.sender) {\r\n        addWhitelist(_addr);\r\n    }\r\n\r\n    event VoterRegistered(address voterAddress);\r\n    event WorkflowStatusChange(WorkflowStatus previousStatus, WorkflowStatus newStatus);\r\n    event ProposalRegistered(uint proposalId);\r\n    event Voted (address voter, uint proposalId);\r\n\r\n    uint private winningProposalId;\r\n    WorkflowStatus public currentWorkflowStatus;\r\n    Proposal[] public proposals;\r\n\r\n    // All the Whitelisted Addresses\r\n    mapping(address => Voter) public whitelist;\r\n\r\n    // Modifier - check if we are in the right Workflow Status in order to execute the following function\r\n    modifier checkRightWorkflow(WorkflowStatus _workflowStatus) {\r\n        require(currentWorkflowStatus == _workflowStatus, \"This action isn't available in your current workflow state\");\r\n        _;\r\n    }\r\n\r\n    // Modifier - check if the msg.sender is Whitelisted\r\n    modifier isWhitelisted() {\r\n        require(whitelist[msg.sender].isRegistered == true, \"You're not Whitelisted\");\r\n        _;\r\n    }\r\n\r\n    // Admin\r\n    // Add an address to the whitelist during the \"RegisteringVoters\" phase\r\n    function addWhitelist(address _voter) public onlyOwner checkRightWorkflow(WorkflowStatus.RegisteringVoters) {\r\n        require(whitelist[_voter].isRegistered == false, \"This address is already whitelisted\");\r\n        whitelist[_voter].isRegistered = true;\r\n        emit VoterRegistered(_voter);\r\n    }\r\n\r\n    // Admin\r\n    // Start the \"ProposalRegistration\" phase only if we are currently in the \"RegisteringVoters\" phase\r\n    function startProposalRegistration() external onlyOwner checkRightWorkflow(WorkflowStatus.RegisteringVoters) {\r\n        currentWorkflowStatus = WorkflowStatus.ProposalsRegistrationStarted;\r\n        emit WorkflowStatusChange(WorkflowStatus.RegisteringVoters, WorkflowStatus.ProposalsRegistrationStarted);\r\n    }\r\n\r\n    // Admin\r\n    // Start the \"ProposalRegistration\" phase only if we are currently in the \"RegisteringVoters\" phase\r\n    function endProposalRegistration() external onlyOwner checkRightWorkflow(WorkflowStatus.ProposalsRegistrationStarted) {\r\n        currentWorkflowStatus = WorkflowStatus.ProposalsRegistrationEnded;\r\n        emit WorkflowStatusChange(WorkflowStatus.ProposalsRegistrationStarted, WorkflowStatus.ProposalsRegistrationEnded);\r\n    }\r\n\r\n    // Admin\r\n    // Start the \"VotingSessionStarted\" phase only if we are currently in the \"ProposalsRegistrationEnded\" phase\r\n    function startVotingSession() external onlyOwner checkRightWorkflow(WorkflowStatus.ProposalsRegistrationEnded) {\r\n        currentWorkflowStatus = WorkflowStatus.VotingSessionStarted;\r\n        emit WorkflowStatusChange(WorkflowStatus.ProposalsRegistrationEnded, WorkflowStatus.VotingSessionStarted);\r\n    }\r\n\r\n    // Admin\r\n    // Start the \"VotingSessionEnded\" phase only if we are currently in the \"VotingSessionStarted\" phase\r\n    function endVotingSession() external onlyOwner checkRightWorkflow(WorkflowStatus.VotingSessionStarted) {\r\n        currentWorkflowStatus = WorkflowStatus.VotingSessionEnded;\r\n        emit WorkflowStatusChange(WorkflowStatus.VotingSessionStarted, WorkflowStatus.VotingSessionEnded);\r\n    }\r\n\r\n    // Whitelisted Address\r\n    // Add a proposal only during the \"ProposalsRegistrationStarted\" phase\r\n    function addProposal(string memory _proposal) external isWhitelisted checkRightWorkflow(WorkflowStatus.ProposalsRegistrationStarted) {\r\n        proposals.push(Proposal({description: _proposal, voteCount: 0}));\r\n        emit ProposalRegistered(proposals.length -1);\r\n    }\r\n\r\n    // Whitelisted Address\r\n    // Vote for a proposal only during the \"VotingSessionStarted\" phase\r\n    function addVote(uint _voteProposalId) external isWhitelisted checkRightWorkflow(WorkflowStatus.VotingSessionStarted) {\r\n        require(whitelist[msg.sender].hasVoted == false, \"You already voted!\");\r\n        require(_voteProposalId < proposals.length, \"You tried to vote for a proposal who doesn't exist\");\r\n        proposals[_voteProposalId].voteCount += 1;\r\n        whitelist[msg.sender].hasVoted = true;\r\n        whitelist[msg.sender].votedProposalId = _voteProposalId;\r\n        emit Voted(msg.sender, _voteProposalId);\r\n    }\r\n\r\n    // Admin\r\n    // Count vote only during the \"VotingSessionEnded\" phase and pass to the \"VotesTallied\" phase\r\n    function countVote() external onlyOwner checkRightWorkflow(WorkflowStatus.VotingSessionEnded) {\r\n        uint mostVotedProposalId;\r\n        uint mostVote;\r\n\r\n        for(uint i=0; i < proposals.length; i++) {\r\n            if(proposals[i].voteCount > mostVote) {\r\n                mostVote = proposals[i].voteCount;\r\n                mostVotedProposalId = i;\r\n            }\r\n        }\r\n\r\n        currentWorkflowStatus = WorkflowStatus.VotesTallied;\r\n        emit WorkflowStatusChange(WorkflowStatus.VotingSessionEnded, WorkflowStatus.VotesTallied);\r\n        winningProposalId = mostVotedProposalId;\r\n    }\r\n\r\n\r\n    // EveryOne\r\n    // Return the winning Proposal\r\n    function getWinner() external view returns(string memory) {\r\n        require(currentWorkflowStatus == WorkflowStatus.VotesTallied, \"The votes have not yet been counted\");\r\n        return proposals[winningProposalId].description;\r\n    }\r\n}"
      }
    }
  }
}